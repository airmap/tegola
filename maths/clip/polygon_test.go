package clip

import (
	"fmt"
	"image/color"
	"log"
	"os"
	"testing"

	"github.com/gdey/tbltest"
	"github.com/airmap/tegola"
	"github.com/airmap/tegola/basic"
	"github.com/airmap/tegola/maths"
	"github.com/airmap/tegola/maths/clip/internal/draw"
	"github.com/airmap/tegola/maths/clip/region"
)

type PolygonTestCase struct {
	desc string
	// Index of the region to use for clipping.
	ridx int
	// Starting Polygon to clip
	p basic.Polygon

	// Expected Polygons
	eps []basic.Polygon

	// Expected error
	eerr error
	// This is for the debug image to be produced. Instead of calculating it, we just tell the system how big the image needs to be to hold all values.
	min, max maths.Pt
}

var SegmentColor = color.RGBA{0xA0, 0xA0, 0xA0, 0xFF}
var ExpectedColor = color.RGBA{0xE9, 0x7F, 0x02, 0xFF}
var GotColor = color.RGBA{0x8A, 0x9B, 0x0F, 0xFF}
var RegionColor = color.RGBA{0xD0, 0xD0, 0xD0, 0xFF}
var RegionAColor = color.RGBA{0x00, 0x00, 0x00, 0xFF}

func (tc *PolygonTestCase) Region() Region { return testRegion[tc.ridx] }
func (tc *PolygonTestCase) DrawTestCase(got []basic.Polygon, filename string) {
	log.Println("Creating image: ", filename)
	f, err := os.Create(filename)
	if err != nil {
		log.Printf("Error creating file %v: %v\n", filename, err)
		return
	}
	defer f.Close()
	var tgot = make([]tegola.Polygon, 0, len(got))
	for i := range got {
		tgot = append(tgot, got[i])
	}
	var teps = make([]tegola.Polygon, 0, len(tc.eps))
	for i := range tc.eps {
		teps = append(teps, tc.eps[i])
	}
	tr := tc.Region()
	r := region.New(maths.Clockwise, tr.Min, tr.Max)
	draw.DrawPolygonTest(
		f, 1024, 768,
		r,
		tc.p,
		teps,
		tgot,
	)
}

func checkLine(want, got tegola.LineString) (string, bool) {
	wantPts := want.Subpoints()
	gotPts := got.Subpoints()
	if len(wantPts) != len(gotPts) {
		return fmt.Sprintf("Number of elements do not match want %v got %v", len(wantPts), len(gotPts)), false
	}
	for i, pt := range wantPts {
		if pt.X() != gotPts[i].X() || pt.Y() != gotPts[i].Y() {
			return fmt.Sprintf(
					"Point %v in Does not match, want: (%v,%v) got:(%v,%v)", i,
					pt.X(),
					pt.Y(),
					gotPts[i].X(),
					gotPts[i].Y()),
				false
		}
	}
	return "", true
}

func checkPolygon(want, got tegola.Polygon) (string, bool) {
	gotLines := got.Sublines()
	wantLines := want.Sublines()
	if len(wantLines) != len(gotLines) {
		return fmt.Sprintf("Number of elements do not match want %v got %v", len(wantLines), len(gotLines)), false
	}
	for i, l := range wantLines {
		if desc, ok := checkLine(l, gotLines[i]); !ok {
			return fmt.Sprintf("For line %v: %v", i, desc), ok
		}
	}
	return "", true
}

func TestClipPolygon(t *testing.T) {

	test := tbltest.Cases(

		PolygonTestCase{
			desc: "Basic Polygon contain clip region.",
			p: basic.NewPolygon(
				[]maths.Pt{
					maths.Pt{-1, -1},
					maths.Pt{11, -1},
					maths.Pt{11, 11},
					maths.Pt{-1, 11},
				}),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						maths.Pt{-1, -1},
						maths.Pt{11, -1},
						maths.Pt{11, 11},
						maths.Pt{-1, 11},
					}),
			},
			// For the image to be drawn.
			min: maths.Pt{-5, -5},
			max: maths.Pt{15, 15},
		},
		PolygonTestCase{ // 1
			desc: "Basic Polygon with a cut out.",
			// For the image to be drawn.
			min: maths.Pt{-10, -10},
			max: maths.Pt{20, 20},
			p: basic.NewPolygon(
				[]maths.Pt{
					maths.Pt{-1, -1},
					maths.Pt{14, -1},
					maths.Pt{14, 14},
					maths.Pt{-1, 14},
				},
				[]maths.Pt{
					maths.Pt{2, 2},
					maths.Pt{2, 10},
					maths.Pt{10, 10},
					maths.Pt{10, 2},
				}),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						maths.Pt{-1, 11},
						maths.Pt{-1, -1},
						maths.Pt{11, -1},
						maths.Pt{11, 11},
					},
					[]maths.Pt{
						maths.Pt{2, 2},
						maths.Pt{2, 10},
						maths.Pt{10, 10},
						maths.Pt{10, 2},
					},
				),
			},
		},
		PolygonTestCase{ // 2
			desc: "Basic Polygon with two cut outs.",
			// For the image to be drawn.
			min: maths.Pt{-10, -10},
			max: maths.Pt{20, 20},
			p: basic.NewPolygon(
				[]maths.Pt{
					{-5, -5},
					{14, -5},
					{14, 14},
					{-5, 14},
				},
				[]maths.Pt{
					{-2, -2},
					{-2, 3},
					{3, 3},
					{3, -2},
				},
				[]maths.Pt{
					{4, 1},
					{4, 12},
					{12, 12},
					{12, 1},
				},
			),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						{-1, 11},
						{-1, -1},
						{11, -1},
						{11, 11},
					},
					[]maths.Pt{
						{0, 3},
						{3, 3},
						{3, 0},
						{0, 0},
					},
					[]maths.Pt{
						{10, 1},
						{4, 1},
						{4, 10},
						{10, 10},
					},
				),
			},
		},
		PolygonTestCase{ // 3
			desc: "Basic Polygon with two cut outs.",
			// For the image to be drawn.
			min: maths.Pt{-10, -10},
			max: maths.Pt{20, 20},
			p: basic.NewPolygon(
				[]maths.Pt{
					{-5, -2},
					{3, -2},
					{3, 3},
					{-2, 3},
					{-2, 12},
					{4, 12},
					{4, 0},
					{12, 0},
					{12, 13},
					{-5, 13},
				},
				[]maths.Pt{
					{-2, -1},
					{-2, 2},
					{2, 2},
					{2, -1},
				},
				[]maths.Pt{
					{5, 2},
					{5, 11},
					{11, 11},
					{11, 2},
				},
			),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						{3, -1},
						{3, 3},
						{-1, 3},
						{-1, -1},
					},
					[]maths.Pt{
						{0, 2},
						{2, 2},
						{2, 0},
						{0, 0},
					},
				),
				basic.NewPolygon(
					[]maths.Pt{
						{4, 11},
						{4, 0},
						{11, 0},
						{11, 11},
					},
					[]maths.Pt{
						{10, 2},
						{5, 2},
						{5, 10},
						{10, 10},
					},
				),
			},
		},

		PolygonTestCase{ // 4
			desc: "Polygon from osm_bonn test.",
			// For the image to be drawn.
			min:  maths.Pt{-2, -2},
			max:  maths.Pt{4098, 4098},
			ridx: 11,
			p: basic.NewPolygon(
				[]maths.Pt{
					{4038, 1792}, // inside
					{4042, 1786}, // inside
					{4035, 1782}, // inside
					{4047, 1762}, // inside
					{4054, 1767}, // inside
					{4060, 1756}, // inside
					{4064, 1758}, // inside
					{4067, 1754}, // inside
					{4056, 1748}, // inside
					{4070, 1726}, // inside
					{4061, 1720}, // inside
					{4072, 1702}, // inside
					{4083, 1709}, // inside
					{4101, 1720}, // crosses (outside) 4098,1718
					{4089, 1740}, // crosses (inside) 4098,1725
					{4098, 1746}, // crosses (outside?) tricky part (insert in two points one as outbound and one as inbound)
					{4088, 1763}, // inside
					{4080, 1759}, // inside
					{4076, 1765}, // inside
					{4066, 1782}, // inside
					{4070, 1785}, // inside
					{4058, 1804}, // inside
					//{4038, 1792},
				},
			),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						{4098, 1725},
						{4089, 1740},
						{4098, 1746},
						{4088, 1763},
						{4080, 1759},
						{4076, 1765},
						{4066, 1782},
						{4070, 1785},
						{4058, 1804},
						{4038, 1792},
						{4042, 1786},
						{4035, 1782},
						{4047, 1762},
						{4054, 1767},
						{4060, 1756},
						{4064, 1758},
						{4067, 1754},
						{4056, 1748},
						{4070, 1726},
						{4061, 1720},
						{4072, 1702},
						{4083, 1709},
						{4098, 1718},
					},
				),
			},
		},

		PolygonTestCase{ // 5
			desc: "Polygon from osm_bonn test 2.",
			// For the image to be drawn.
			min:  maths.Pt{-2, -2},
			max:  maths.Pt{4098, 4098},
			ridx: 11,
			p: basic.NewPolygon(
				[]maths.Pt{
					{-160, 1205}, // outside
					{-154, 1187}, // outside
					{-122, 1146}, // outside
					{-91, 1113},  // outside
					{-60, 1086},  // outside
					{-33, 1072},  // outside

					{-2, 1063},  // This is an intersection point on the boundary.
					{22, 1059},  // inside
					{47, 1059},  // inside
					{74, 1080},  // inside
					{101, 1115}, // inside
					{137, 1176}, // inside
					{139, 1187}, // inside
					{131, 1196}, // inside
					{116, 1208}, // inside
					{89, 1226},  // inside
					{67, 1238},  // inside
					{50, 1246},  // inside
					{4, 1248},   // inside
					// intersection here {-2, 1249}
					{-15, 1254}, // outside
					{-43, 1258},
					{-73, 1252},
					{-83, 1247},
					{-72, 1211},
					{-65, 1199},
					{-59, 1187},
					{-60, 1176},
					{-69, 1171},
					{-80, 1171},
					{-91, 1179},
					{-111, 1223},
					{-118, 1226},
					{-150, 1218},
					//{-160, 1205},
				},
			),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{
						{-2, 1063},
						{22, 1059},
						{47, 1059},
						{74, 1080},
						{101, 1115},
						{137, 1176},
						{139, 1187},
						{131, 1196},
						{116, 1208},
						{89, 1226},
						{67, 1238},
						{50, 1246},
						{4, 1248},
						{-2, 1249},
					},
				),
			},
		},

		PolygonTestCase{ // 6
			desc: "Poluygon from: -c ../tegola/osm_tegola.toml -z 4 -x 2 -y 5 -g 62701",
			min:  maths.Pt{0, 0},
			max:  maths.Pt{4096, 4096},
			ridx: 12,
			p: basic.NewPolygon([]maths.Pt{
				{615, -64}, {614, -61}, {615, -59}, {613, -55}, {613, -51}, {604, -46}, {594, -36}, {592, -37}, {588, -42}, {585, -42}, // 049920 — 049929
				{584, -44}, {583, -45}, {582, -45}, {580, -47}, {577, -48}, {576, -53}, {574, -55}, {575, -53}, {574, -53}, {573, -51}, // 049930 — 049939
				{575, -49}, {574, -48}, {577, -47}, {579, -44}, {582, -42}, {581, -44}, {582, -44}, {584, -41}, {588, -40}, {592, -34}, // 049940 — 049949
				{590, -32}, {587, -32}, {586, -33}, {586, -35}, {586, -33}, {585, -34}, {585, -33}, {581, -35}, {580, -34}, {581, -33}, // 049950 — 049959
				{581, -32}, {580, -32}, {579, -36}, {577, -36}, {576, -39}, {576, -40}, {575, -39}, {576, -38}, {577, -36}, {576, -35}, // 049960 — 049969
				{577, -33}, {577, -32}, {574, -30}, {573, -31}, {567, -30}, {563, -30}, {562, -28}, {560, -28}, {561, -26}, {560, -25}, // 049970 — 049979
				{563, -25}, {565, -21}, {574, -21}, {576, -20}, {577, -19}, {582, -19}, {582, -18}, {584, -16}, {586, -12}, {586, -15}, // 049980 — 049989
				{588, -15}, {589, -12}, {587, -10}, {586, -11}, {587, -10}, {588, -9}, {588, -8}, {587, -9}, {587, -7}, {586, -4}, // 049990 — 049999
				{586, -1}, {584, 2}, {583, 2}, {582, 2}, {581, 6}, {583, 7}, {582, 8}, {582, 7}, {581, 9}, {580, 10}, // 050000 — 050009
				{579, 15}, {577, 18}, {575, 17}, {575, 19}, {574, 17}, {573, 18}, {572, 16}, {573, 16}, {572, 14}, {571, 14}, // 050010 — 050019
				{569, 11}, {567, 10}, {566, 9}, {565, 8}, {566, 10}, {567, 11}, {568, 13}, {570, 19}, {571, 19}, {571, 20}, // 050020 — 050029
				{574, 27}, {576, 27}, {575, 28}, {577, 29}, {577, 31}, {579, 34}, {577, 35}, {577, 34}, {576, 33}, {575, 38}, // 050030 — 050039
				{573, 39}, {571, 46}, {570, 47}, {571, 47}, {570, 47}, {570, 43}, {569, 45}, {568, 45}, {568, 48}, {568, 50}, // 050040 — 050049
				{567, 50}, {568, 50}, {568, 47}, {567, 50}, {565, 48}, {564, 48}, {565, 50}, {565, 51}, {566, 53}, {566, 54}, // 050050 — 050059
				{567, 56}, {567, 57}, {566, 56}, {564, 57}, {564, 55}, {563, 55}, {563, 54}, {561, 52}, {561, 53}, {560, 52}, // 050060 — 050069
				{560, 53}, {558, 53}, {557, 50}, {555, 49}, {552, 45}, {551, 42}, {549, 40}, {551, 40}, {548, 38}, {543, 33}, // 050070 — 050079
				{541, 31}, {539, 31}, {543, 35}, {543, 37}, {547, 40}, {546, 42}, {548, 42}, {551, 49}, {552, 50}, {553, 55}, // 050080 — 050089
				{555, 57}, {555, 59}, {557, 59}, {556, 62}, {555, 61}, {553, 59}, {551, 58}, {551, 60}, {554, 61}, {557, 67}, // 050090 — 050099
				{556, 69}, {557, 77}, {556, 80}, {555, 79}, {553, 79}, {553, 80}, {552, 82}, {553, 83}, {552, 83}, {552, 85}, // 050100 — 050109
				{554, 88}, {552, 88}, {550, 87}, {551, 90}, {549, 89}, {545, 85}, {541, 84}, {538, 77}, {532, 74}, {532, 76}, // 050110 — 050119
				{530, 76}, {528, 74}, {527, 74}, {527, 73}, {524, 73}, {520, 70}, {519, 70}, {516, 66}, {516, 63}, {512, 60}, // 050120 — 050129
				{509, 52}, {510, 51}, {509, 51}, {509, 47}, {509, 45}, {508, 43}, {508, 40}, {509, 41}, {509, 40}, {506, 37}, // 050130 — 050139
				{506, 34}, {505, 32}, {506, 32}, {505, 27}, {505, 28}, {504, 25}, {505, 24}, {499, 15}, {498, 13}, {499, 11}, // 050140 — 050149
				{497, 10}, {500, 11}, {500, 12}, {493, 4}, {494, 3}, {496, 3}, {498, 5}, {499, 5}, {500, 7}, {501, 7}, // 050150 — 050159
				{503, 10}, {507, 13}, {508, 11}, {510, 11}, {509, 12}, {510, 14}, {512, 14}, {512, 13}, {512, 14}, {514, 14}, // 050160 — 050169
				{512, 14}, {512, 12}, {511, 12}, {510, 10}, {511, 10}, {512, 5}, {511, 5}, {512, 4}, {512, 0}, {513, -5}, // 050170 — 050179
				{511, -1}, {511, -2}, {511, -4}, {513, -6}, {512, -8}, {513, -9}, {514, -8}, {516, -8}, {514, -7}, {515, -5}, // 050180 — 050189
				{516, -6}, {514, -6}, {517, -7}, {517, -8}, {519, -8}, {519, -9}, {523, -11}, {528, -11}, {529, -10}, {532, -10}, // 050190 — 050199
				{534, -8}, {541, -6}, {545, -1}, {542, -8}, {541, -7}, {541, -8}, {540, -7}, {537, -9}, {536, -11}, {534, -12}, // 050200 — 050209
				{535, -14}, {534, -16}, {529, -18}, {529, -19}, {530, -21}, {529, -22}, {528, -22}, {528, -23}, {529, -24}, {530, -24}, // 050210 — 050219
				{530, -27}, {531, -29}, {533, -29}, {533, -31}, {537, -34}, {537, -35}, {538, -35}, {539, -36}, {537, -38}, {536, -42}, // 050220 — 050229
				{536, -43}, {534, -45}, {533, -47}, {534, -54}, {536, -55}, {538, -54}, {539, -55}, {537, -55}, {539, -56}, {538, -59}, // 050230 — 050239
				{539, -59}, {539, -58}, {539, -60}, {540, -60}, {544, -59}, {545, -60}, {543, -61}, {544, -61}, {547, -60}, {547, -61}, // 050240 — 050249
				{548, -61}, {549, -59}, {550, -61}, {551, -59}, {552, -59}, {552, -62}, {553, -62}, {553, -63}, {552, -64}, {550, -67}, // 050250 — 050259
				{552, -71}, {555, -66}, {556, -66}, {558, -64}, {553, -71}, {553, -76}, {550, -86}, {550, -88}, {550, -89}, {549, -92}, // 050260 — 050269
				{550, -93}, {553, -91}, {553, -92}, {552, -92}, {552, -94}, {550, -95}, {549, -97}, {551, -110}, {551, -121}, {552, -124}, // 050270 — 050279
				{550, -124}, {550, -129}, {558, -130}, {560, -131}, {566, -132}, {565, -133}, {566, -134}, {566, -136}, {569, -138}, {574, -137}, // 050280 — 050289
				{578, -134}, {579, -135}, {578, -137}, {582, -136}, {585, -136}, {588, -139}, {590, -137}, {593, -136}, {598, -133}, {599, -133}, // 050290 — 050299
			}),
			eps: []basic.Polygon{
				basic.NewPolygon([]maths.Pt{

					{585.000000, 0.000000}, {584.000000, 2.000000}, {583.000000, 2.000000}, {582.000000, 2.000000}, {581.000000, 6.000000}, {583.000000, 7.000000}, {582.000000, 8.000000}, {582.000000, 7.000000}, {581.000000, 9.000000}, {580.000000, 10.000000}, // 000000 — 000009
					{579.000000, 15.000000}, {577.000000, 18.000000}, {575.000000, 17.000000}, {575.000000, 19.000000}, {574.000000, 17.000000}, {573.000000, 18.000000}, {572.000000, 16.000000}, {573.000000, 16.000000}, {572.000000, 14.000000}, {571.000000, 14.000000}, // 000010 — 000019
					{569.000000, 11.000000}, {567.000000, 10.000000}, {566.000000, 9.000000}, {565.000000, 8.000000}, {566.000000, 10.000000}, {567.000000, 11.000000}, {568.000000, 13.000000}, {570.000000, 19.000000}, {571.000000, 19.000000}, {571.000000, 20.000000}, // 000020 — 000029
					{574.000000, 27.000000}, {576.000000, 27.000000}, {575.000000, 28.000000}, {577.000000, 29.000000}, {577.000000, 31.000000}, {579.000000, 34.000000}, {577.000000, 35.000000}, {577.000000, 34.000000}, {576.000000, 33.000000}, {575.000000, 38.000000}, // 000030 — 000039
					{573.000000, 39.000000}, {571.000000, 46.000000}, {570.000000, 47.000000}, {570.000000, 43.000000}, {569.000000, 45.000000}, {568.000000, 45.000000}, {568.000000, 48.000000}, {568.000000, 50.000000}, {568.000000, 47.000000}, {567.000000, 50.000000}, // 000040 — 000049
					{565.000000, 48.000000}, {564.000000, 48.000000}, {565.000000, 50.000000}, {565.000000, 51.000000}, {566.000000, 53.000000}, {566.000000, 54.000000}, {567.000000, 56.000000}, {567.000000, 57.000000}, {566.000000, 56.000000}, {564.000000, 57.000000}, // 000050 — 000059
					{564.000000, 55.000000}, {563.000000, 55.000000}, {563.000000, 54.000000}, {561.000000, 52.000000}, {561.000000, 53.000000}, {560.000000, 52.000000}, {560.000000, 53.000000}, {558.000000, 53.000000}, {557.000000, 50.000000}, {555.000000, 49.000000}, // 000060 — 000069
					{552.000000, 45.000000}, {551.000000, 42.000000}, {549.000000, 40.000000}, {551.000000, 40.000000}, {548.000000, 38.000000}, {543.000000, 33.000000}, {541.000000, 31.000000}, {539.000000, 31.000000}, {543.000000, 35.000000}, {543.000000, 37.000000}, // 000070 — 000079
					{547.000000, 40.000000}, {546.000000, 42.000000}, {548.000000, 42.000000}, {551.000000, 49.000000}, {552.000000, 50.000000}, {553.000000, 55.000000}, {555.000000, 57.000000}, {555.000000, 59.000000}, {557.000000, 59.000000}, {556.000000, 62.000000}, // 000080 — 000089
					{555.000000, 61.000000}, {553.000000, 59.000000}, {551.000000, 58.000000}, {551.000000, 60.000000}, {554.000000, 61.000000}, {557.000000, 67.000000}, {556.000000, 69.000000}, {557.000000, 77.000000}, {556.000000, 80.000000}, {555.000000, 79.000000}, // 000090 — 000099
					{553.000000, 79.000000}, {553.000000, 80.000000}, {552.000000, 82.000000}, {553.000000, 83.000000}, {552.000000, 83.000000}, {552.000000, 85.000000}, {554.000000, 88.000000}, {552.000000, 88.000000}, {550.000000, 87.000000}, {551.000000, 90.000000}, // 000100 — 000109
					{549.000000, 89.000000}, {545.000000, 85.000000}, {541.000000, 84.000000}, {538.000000, 77.000000}, {532.000000, 74.000000}, {532.000000, 76.000000}, {530.000000, 76.000000}, {528.000000, 74.000000}, {527.000000, 74.000000}, {527.000000, 73.000000}, // 000110 — 000119
					{524.000000, 73.000000}, {520.000000, 70.000000}, {519.000000, 70.000000}, {516.000000, 66.000000}, {516.000000, 63.000000}, {512.000000, 60.000000}, {509.000000, 52.000000}, {510.000000, 51.000000}, {509.000000, 51.000000}, {509.000000, 47.000000}, // 000120 — 000129
					{509.000000, 45.000000}, {508.000000, 43.000000}, {508.000000, 40.000000}, {509.000000, 41.000000}, {509.000000, 40.000000}, {506.000000, 37.000000}, {506.000000, 34.000000}, {505.000000, 32.000000}, {506.000000, 32.000000}, {505.000000, 27.000000}, // 000130 — 000139
					{505.000000, 28.000000}, {504.000000, 25.000000}, {505.000000, 24.000000}, {499.000000, 15.000000}, {498.000000, 13.000000}, {499.000000, 11.000000}, {497.000000, 10.000000}, {500.000000, 11.000000}, {500.000000, 12.000000}, {493.000000, 4.000000}, // 000140 — 000149
					{494.000000, 3.000000}, {496.000000, 3.000000}, {498.000000, 5.000000}, {499.000000, 5.000000}, {500.000000, 7.000000}, {501.000000, 7.000000}, {503.000000, 10.000000}, {507.000000, 13.000000}, {508.000000, 11.000000}, {510.000000, 11.000000}, // 000150 — 000159
					{509.000000, 12.000000}, {510.000000, 14.000000}, {512.000000, 14.000000}, {512.000000, 12.000000}, {511.000000, 12.000000}, {510.000000, 10.000000}, {511.000000, 10.000000}, {512.000000, 5.000000}, {511.000000, 5.000000}, {512.000000, 4.000000}, // 000160 — 000169
					{512.000000, 0.000000}, // 000170 — 000170
				}),
			},
		},

		PolygonTestCase{ // 7
			desc: "Hit's the region and goes right out.",
			// For the image to be drawn.
			min:  maths.Pt{0, 0},
			max:  maths.Pt{4096, 4096},
			ridx: 12,
			p: basic.NewPolygon(
				[]maths.Pt{
					{3000, 2000},
					{3000, 4096},
					{3000, 4190},
					{2900, 4200},
					{2800, 4096},
					{2000, 4190},
					{-10, 4190},
					{-10, -10},
					{4200, -10},
					{4200, 2000},
				},
			),
			eps: []basic.Polygon{
				basic.NewPolygon(
					[]maths.Pt{

						{4096, 2000},
						{3000, 2000},
						{3000, 4096},
						{0, 4096},
						{0, 0},
						{4096, 0},
					},
				),
			},
		},
	)
	// TODO: gdey: square this either delete or get it to work. This is the old clipping algo.
	return // Skipping for now.
	test.RunOrder = "7"
	test.Run(func(i int, tc PolygonTestCase) {
		var drawPng bool
		drawPng = true
		t.Log("Starting test ", i)
		r := tc.Region()
		got, err := Polygon(tc.p, r.Min, r.Max, r.Extant)
		if err != tc.eerr {
			t.Errorf("Did not get expected error: want : %v got %v", err, tc.eerr)
			drawPng = true
			goto DRAW_IMAGE
		}
		t.Logf("Got %#v :  %v", got, err)
		if len(tc.eps) != len(got) {
			t.Errorf("For test(%v-%v): wanted %v polygons got %v", i, tc.desc, len(tc.eps),
				len(got))
			drawPng = true
			goto DRAW_IMAGE
		}
		for j, ep := range tc.eps {
			if desc, ok := checkPolygon(&ep, &got[j]); !ok {
				drawPng = true
				t.Errorf("For test(%v-%v) polygon(%v) : %v", i, tc.desc, j, desc)
			}
		}
	DRAW_IMAGE:
		if drawPng || *showPng {
			tc.DrawTestCase(got, fmt.Sprintf("tstcase_%v.svg", i))
		}
	})
}
